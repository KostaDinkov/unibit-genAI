  Content of pages/api/openai.js:
  // file: /pages/api/openai.js

import { Configuration, OpenAIApi } from "openai";
import { getSystemPrompt, getFunctions } from "../../prompts/promptUtils";

// Create a configuration object with the OpenAI API key
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
// Create an instance of the OpenAIApi using the configuration
const openai = new OpenAIApi(configuration);

/**
 * Handle the API request
 * @param {object} req - The HTTP request object
 * @param {object} res - The HTTP response object
 */
export default async function (req, res) {
  // Check if the OpenAI API key is configured
  if (!configuration.apiKey) {
    res.status(500).json({
      error: {
        message:
          "OpenAI API key not configured, please follow instructions in README.md",
      },
    });
    return;
  }

  // Extract the payload from the request body
  const userMessage = req.body.payload || "";
  console.log("The userMessage is: ", userMessage);

  try {

    const systemMessage = getSystemPrompt();
    const functions = getFunctions();
    const messages = [systemMessage, userMessage];

    // Call the OpenAI API to create a chat completion
    const completion = await openai.createChatCompletion({
      "model": "gpt-3.5-turbo-0613",
      "messages": messages,
      "functions": functions,
      temperature: 1,
      max_tokens: 510,
      top_p: 0,
    });

    const resultContent = completion.data.choices[0].message.function_call.arguments;
    try {
      console.log("Data from OpenAI API: ", resultContent);
      const jsonResult = JSON.parse(resultContent);
      res.status(200).json({ result: jsonResult });
    } catch (error) {
      res.status(500).json({ error: { message: "Failed to parse JSON response." } });
    }
  } catch (error) {
    if (error.response) {
      // If there's a response error, log and return the error message
      console.error(error.response.status, error.response.data);
      res.status(error.response.status).json(error.response.data);
    } else {
      // If there's an error with the OpenAI API request, log and return a generic error message
      console.error(`Error with OpenAI API request: ${error.message}`);
      res.status(500).json({
        error: {
          message: "An error occurred during your request.",
        },
      });
    }
  }
}

  Content of pages/index.js:
  // file: /pages/index.js
import Head from "next/head";
import { Inter } from "next/font/google";
import { useState } from "react";
import TextInput from "@/components/TextInput";
import SubmitButton from "@/components/SubmitButton";
import ResponseDisplay from "@/components/ResponseDisplay";
import useApi from "@/hooks/useApi";
import { getUserPrompt } from "../prompts/promptUtils";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [inputValue, setInputValue] = useState("");
  const { data, error, loading, fetchData } = useApi();

  const handleSubmit = async (event) => {
    event.preventDefault();
    const submitValue = getUserPrompt(inputValue);
    await fetchData("/api/openai", "POST", submitValue);
  };

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <>
      <Head>
        <title>NextJS OpenAI Boilerplate</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container">
        <h1 className={inter.className}>NextJS OpenAI Boilerplate</h1>
        <p className={inter.className}>
          {" "}
          Test this boilerplate: Enter an animal and it will generate a pet name
          for you.
        </p>
        <form>
          <ResponseDisplay data={data} error={error} loading={loading} />
          <TextInput
            value={inputValue}
            onChange={handleInputChange}
            placeholder={"Enter an animal"}
          />
          <SubmitButton onClick={handleSubmit} disabled={loading} />
        </form>
      </main>
    </>
  );
}

  Content of pages/_app.js:
  // file: /pages/_app.js
import '@/styles/globals.css'

export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />
}

  Content of pages/_document.js:
  // file: /pages/_document.js
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

  Content of components/ResponseDisplay.js:
  // file: /components/ResponseDisplay.js
const ResponseDisplay = ({ data, error, loading }) => {
  let content;

  if (loading) {
    content = "Loading...";
  } else if (error) {
    content = `Error: ${error.message}`;
  } else if (data) {
    console.log("Data from OpenAI API in display: ", data.result);

    content = (
      <>
        <p>Name: {data.result.animalPetName}</p>
        <p>Description: {data.result.description}</p>
      </>
    );
  } else {
    content = "";
  }

  return <div className="response-display">{content}</div>;
};

export default ResponseDisplay;

  Content of components/SubmitButton.js:
  // file: /components/SubmitButton.js
const SubmitButton = ({ onClick }) => {
  return (
    <button type="submit" className="submit-button" onClick={onClick}>
      Submit
    </button>
  );
};

export default SubmitButton;

  Content of components/TextInput.js:
  // file: /components/TextInput.js
const TextInput = ({ value, onChange, placeholder }) => {
  return (
    <input
      type="text"
      value={value}
      onChange={onChange}
      className="text-input"
      placeholder={placeholder}
    />
  );
};

export default TextInput;
  Content of hooks/useApi.js:
  // file: /hooks/useApi.js
import { useState, useCallback } from "react";

const useApi = () => {
  // Define the state variables for data, error, and loading
  const [data, setData] = useState();
  const [error, setError] = useState();
  const [loading, setLoading] = useState(false);

  // fetch data to make the API call when the payload changes
  const fetchData = useCallback(async (url, method, payload) => {
    setLoading(true); // Set loading to true before making the API call
    try {
      // Make the API call using the provided url, method, and payload
      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ payload }),
      });

      const result = await response.json();
      if (response.status !== 200) {
        // If the response status is not 200, throw an error
        throw (
          result.error ||
          new Error(`Request failed with status ${response.status}`)
        );
      }

      setData(result); // Set the data state with the API response
      setError(null); // Reset the error state to null
    } catch (error) {
      setError(error); // Set the error state with the caught error
    } finally {
      setLoading(false); // Set loading to false after the API call
    }
  }, []);

  // Return the data, error, and loading states from the hook
  return { data, error, loading, fetchData };
};

export default useApi;

  Content of styles/globals.css:
  /* // file: styles/globals.css */
body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
}

.text-input {
  width: 100%;
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.submit-button {
  display: inline-block;
  margin: 1rem 0;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  color: white;
  background-color: #0070f3;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.submit-button:hover {
  background-color: #0051cc;
}

.response-display {
  margin-top: 1rem;
  padding: 0.5rem;
}
  Content of prompts/promptUtils.js:
  // file: /prompts/promptUtils.js
export function getSystemPrompt() {
  return {
    role: "system",
    content: "You are a helpful assistant that specializes in generating creative pet names.",
  };
}

export function getUserPrompt(input) {
  return {
    role: "user",
    content: `Generate a creative pet name and short description for a ${input}.`,
  };
}

export function getFunctions() {
  return [
    {
      name: "generate_pet_name",
      description: "Generate a pet name for an animal.",
      parameters: {
        type: "object",
        properties: {
          animalPetName: {
            type: "string",
            description: "The generated pet name for the animal",
          },
          description: {
            type: "string",
            description: "The generated explanation of the pet name",
          },
        },
        "required": ["animalPetName", "description"]
      },
    },
  ];
}
